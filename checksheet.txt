                          

			           Ubuntu Basic Commands(Week1_Day1)


‘pwd’ - used to search current working directory
‘date’ - displays current date and time
‘cal’    - displays a calendar of the current month
‘df’     - see the current amount of free space on our disk drives
‘free’  - display the amount of free memory
‘CMD -h’ or ‘man CMD’ will display  list of flags the program takes
cd     - change directory
cd /usr/bin - absolute path
cd ..  - working directory parent
cd ./bin or cd bin - relative path
cd or cd ~  - home directory
cd -    - previous working directory
ls-   list files
ls -l  - show detailed info in columns
ls -a - include hidden files also
ls -t - sort by last modified date newest first
ls -S - sort by size
ls -R  - recursively list subdirectories
ls -F  - indicator at the end of each file  / if it is a directory
`ls /usr` - specify directory to list   

file <filename>   - determine the file type
less <filename> - show the contents of a file
b - scroll back one page
space - scroll forward one page
up arrow - scroll up one line
down arrow - scroll down one line
G - move to the end of file
g - move to the beginning of file
/characters - search forward the next occurance of characters
n - search for the next occurrence of the previous search

Wildcards:It provides special characters to help us rapidly specify groups of filenames
* - Matches any characters ?- Matches any single character

mkdir <directory> - create directory
mkdir <dir1> <dir2> <dir3> - create multiple directories
mkdir -p <dir1>/<dir2>/<dir3> - create intermediate directories as required
cp <item1> <item2> - copies the single file or directory item1 to the file or directory item2
cp file1 file2 dir1  - Copy file1 and file2 into directory
cp dir1/* dir2 - Using a wildcard, copy all the files in dir1 into dir2. The directory dir2 must already exist.
cp -r dir1 dir2 - Copy the contents of directory dir1 to directory dir2.
mv <item1> <item2> - performs both file moving and file renaming mv file1 file2 - Move file1 to file2
rm <item>  - used to remove (delete) files and directories
rm -r dir1 - Delete dir1 and its contents.
rm -r file1 dir1 - Delete file1 and dir1 and its contents.
wget <location>  - command-line program for file downloading
unzip <file>  - command to unzip a file
less file.txt – display the inner content of a file

The cat command reads one or more files and copies them to standard output

$ cat file1.txt file2.txt

$ cat file_* > combined.txt  - read the files and saving at combined.txt
$ sort file.txt - sorts the lines of the file in ascending order
$ sort file.txt > sorted_file.txt -In case you want to save the file in sorted order
$ sort -r file.txt  -sorts the file in reverse order

grep – Print Lines Matching a Pattern
grep is a powerful program used to find text patterns within files
$ grep search_word file.txt
This shows all the lines in file.txt which contain the search_word
You can also use this to search in multiple files along with wild cards also
$ grep search_word file_1.txt file_2.txt 
$ grep search_word file_*
wc – Print Line, Word, and Byte Counts
The wc (word count) command is used to display the number of lines, words, and bytes contained in files
$ wc file.txt
This shows the lines, words and bytes of file.txt
$ wc files_*
TIP: You can also use wild cards
MORE OPTIONS
$ wc -l
shows the no of lines
$ wc -w
shows the no of words
$ wc -m
shows the no of characters
head / tail – Print First / Last Part of Files
Sometimes we don't want all the output from a command. We may only want the first few lines or the last few lines. The head command prints the first ten lines of a file, and the tail command prints the last ten lines.
$ head file.txt
shows the first 10 lines of the file
$ tail file.txt
shows the last 10 lines of the file
$ head -n 20 file.txt
shows the first 20 lines of the file
$ tail -n 20 file.txt
shows the last 20 lines of the file
pipline operator: '| ' This operator is used to connect output of one file to the input of the another file.we can use to connect the any number of file
$ grep masai demo.txt | wc -l  it will collect the word 'masai' occur no of time in the file demo.txt and will count the no of occurance
$ find <path>   -Find all the folders (including sub folders) and files in the given path

$ find <path> -type d  use to Adding the flag -type d limits the search to directories

$ find <path> -type f    Adding the flag -type f limits the search to files

$ find <path> -type d | wc -l   use to counts all the files in a particular folder

$ find <path> -type f -name "*.csv"  it used to Finds all the files in the given path whose name ends with .csv

$ find <path> type f -name "*.csv" -size -1M   Finds all the files in the given path whose name ends with .csv and having size less than 1MB

echo – Display a line of text

$ echo "Hello MASAI" will display Hello MASAI

$ echo "Hello MASAI" > masai.txt  it will  store the Hellow Masai in masai.txt

Expansion

$ echo *   

Brace Expansion

$ echo string_{a,b,c}
Output: string_a string_b string_c
$ echo number_{1..5}
Output:number_1 number_2 number_3 number_4 number_5

$ uniq demo.txt - Report or Omit Repeated Lines.but before using unique we have to sorted the file first

$ sort demo.txt | uniq This will now gives us the unique lines from the file demo.txt

$ uniq -d sorted.txt This will only show the duplicate lines from the files

$ uniq -c sorted.txt Outputs the list of lines preceded by the number of times the line occurs

$ tar The tar program is the classic tool for archiving files

C Create an archive from a list of files and/or directories
x Extract an archive
t List the contents of an archive
$ tar -cf demo.tar -demo Creates a tar file from all the folders and files in the folder demo to a file called demo.tar
$ tar -tf demo.tar Lists the contents of the tar file demo.tar
$ tar -xf demo.tar
Extracts the contents of the file demo.tar

nano -Popular command line text editor

$ nano :Opens the editor

$ nano file.txt  Opens the editor with the file file.txt

[Ctrl]o - Write to file

[Ctrl]w - Search for word

[Ctrl][Shift]- [Ctrl]_ - Go to line

[Ctrl]k - Cut line

[Ctrl]u- Uncut (Paste)

touch -The touch command is usually used to set or update the access, change, and modify times of files. However, if a filename argument is that of a nonexistent file, an empty file is created

$ touch file.txt -Creates the file file.txt if not exists

$ touch file1 file2 -Creates the files file1 and file2 if not exists

$ touch file-{a,b,c,d} Creates the files file-a file-b file-c file-d if not exists

< Standard Input  :Using the < redirection operator, we change the source of standard input from the key board to the file demo.txt


 

				GIT Basic Commands

git config - sets or see the configuration for git
git config --global user.name [Firstname Lastname] - set a name that is identifiable for credit when review version history
git config --global user.email [email]  - set an email address that will be associated with each history marker
git config user.name - see the name set
git init - initialize an existing directory as a Git repository
git clone [url] - retrieve an entire repository from a hosted location via URL
git add [file] - add a file as it looks now to your next commit (stage)
git add .      - add all files of the folder
git status -show modified files in working directory, staged for your next commit

git commit -m "[descriptive message]" - commit your staged content as a new commit snapshot
git remote add orgin [url] - add a git URL as a remote
git pull - Fetch and merge any commits from the tracking remote branch
git push origin master - Transmit local branch commits to the remote repository origin master branch
$ git log  -show all commits in the current repository history


